$color-pack = false;
$use-fonts = true;
$use-fonts-extended = false;
$show-demo-menu = false;

$use-chm-animation = false;

// Fonts
// ============================================================
$font-base = 'Futura C', Roboto, helvetica, arial, sans-serif;
$font-accent = 'Bebas Neue', 'Fira Sans', Roboto, helvetica, arial, sans-serif;
$font-util = 'Futura PT', 'Futura C', Roboto, helvetica, arial, sans-serif;
$font-size-base = 16px;
// fonts to include
$fonts-path = '../assets/fonts/';
$fonts-arr = {
  'BebasNeue-400': {
    name: "Bebas Neue",
    file: BebasNeue-Regular,
    weight: 400,
    style: normal
  },
  'BebasNeue-300': {
    name: "Bebas Neue",
    file: BebasNeue-Book,
    weight: 300,
    style: normal
  },
  'BebasNeue-200': {
    name: "Bebas Neue",
    file: BebasNeue-Light,
    weight: 200,
    style: normal
  },
  'BebasNeue-100': {
    name: "Bebas Neue",
    file: BebasNeue-Thin,
    weight: 100,
    style: normal
  },
  'BebasNeue-600': {
    name: "Bebas Neue",
    file: BebasNeue-Bold,
    weight: 600,
    style: normal
  },
  'myriadpro-400': {
    name: "Myriad Pro",
    file: Myriadpro-Regular,
    weight: 400,
    style: normal
  },
  'FuturaC-400': {
    name: "Futura C",
    file: FuturaDemiC,
    weight: 400,
    style: normal
  },
  'FuturaC-300': {
    name: "Futura C",
    file: FuturaBookC,
    weight: 300,
    style: normal
  },
  'FuturaPT-400': {
    name: "Futura PT",
    file: FuturaPTBook,
    weight: 400,
    style: normal
  },
  'FuturaPT-600': {
    name: "Futura PT",
    file: FuturaPTBold,
    weight: 600,
    style: normal
  },
  'HeliosCond-400': {
    name: "Helios C",
    file: HeliosCondC,
    weight: 400,
    style: normal
  },
  'HeliosCond-600': {
    name: "Helios C",
    file: HeliosCondC-Bold,
    weight: 600,
    style: normal
  }
};

//Colors
$primary = #d20000;
$secondary = #a3ef38;
$secondary-darker = #7cd53c;
$white = #ffffff;
$gray = {
  "bg": #bebebe,
  "border": #d1d1d1,
  "text": #6c6c6c
}
$dark = #333333;
$black = #000000;

$green = #73ff6c;
$yellow = #fffd6c;
$red = #ff6c6c;

$color-map = {
	"red": #ff0528,
	"orange": #efbf2d,
	"yellow": #f8ff2c,
	"green": #2def7b
}


// Grid
// ============================================================
$grid-breakpoints := {
  xs: 0
  ms: 480px
  sm: 768px
  md: 1024px
  lg: 1280px
  xl: 1600px
  //lg: (1440px - 16px) // Desktop gets a 16dp reduction
  //xl: (1920px - 16px) // https://material.io/guidelines/layout/responsive-ui.html#responsive-ui-breakpoints
}

$header-height = 60px;

$container-widths = {
  min: 20rem, // 320px
  max: 72.5rem // 1160px
}


$grid-gutter = 2.5rem
$grid-gutter-mobile = 1rem
$grid-columns = 12



// Display
// ============================================================
$display-breakpoints := {
  xs-only: "only screen and (max-width: %s)" % ($grid-breakpoints.ms - 1)
  ms-only: "only screen and (min-width: %s) and (max-width: %s)" % ($grid-breakpoints.ms ($grid-breakpoints.sm - 1))
  ms-and-down: "only screen and (max-width: %s)" % ($grid-breakpoints.sm - 1)
  ms-and-up: "only screen and (min-width: %s)" % $grid-breakpoints.ms
  sm-only: "only screen and (min-width: %s) and (max-width: %s)" % ($grid-breakpoints.sm ($grid-breakpoints.md - 1))
  sm-and-down: "only screen and (max-width: %s)" % ($grid-breakpoints.md - 1)
  sm-and-up: "only screen and (min-width: %s)" % $grid-breakpoints.sm
  md-only: "only screen and (min-width: %s) and (max-width: %s)" % ($grid-breakpoints.md ($grid-breakpoints.lg  - 1))
  md-and-down: "only screen and (max-width: %s )" % ($grid-breakpoints.lg - 1)
  md-and-up: "only screen and (min-width: %s)" % $grid-breakpoints.md
  lg-only: "only screen and (min-width: %s) and (max-width: %s)" % ($grid-breakpoints.lg ($grid-breakpoints.xl - 1))
  lg-and-down: "only screen and (max-width: (%s - 1))" % $grid-breakpoints.xl
  lg-and-up: "only screen and (min-width: %s)" % $grid-breakpoints.lg
  xl-only: "only screen and (min-width: %s)" % $grid-breakpoints.xl
}

// Spacing
// ============================================================
$spacer := $font-size-base
$spacer-x := $spacer
$spacer-y := $spacer
$spacers := {
  zero: {
    x: 0,
    y: 0
  },
  one: {
    x: ($spacer-x * .25),
    y: ($spacer-y * .25)
  },
  two: {
    x: ($spacer-x * .5),
    y: ($spacer-y * .5)
  },
  three: {
    x: $spacer-x,
    y: $spacer-y
  },
  four: {
    x: ($spacer-x * 1.5),
    y: ($spacer-y * 1.5)
  },
  five: {
    x: ($spacer-x * 2),
    y: ($spacer-y * 2)
  }
  six: {
    x: ($spacer-x * 2.5),
    y: ($spacer-y * 2.5)
  }
  seven: {
    x: ($spacer-x * 3),
    y: ($spacer-y * 3)
  },
  eight: {
    x: ($spacer-x * 4),
    y: ($spacer-y * 4)
  },
  ten: {
    x: ($spacer-x * 0.625),
    y: ($spacer-y * 0.625)
  },
  fifteen: {
    x: 15px,
    y: 15px
  },
  twenty: {
    x: ($spacer-x * 1.25),
    y: ($spacer-y * 1.25)
  },
  thirty: {
    x: 30px,
    y: 30px
  }
}

$border-radius-base = 3px;

// State selectors
hover-focus = '&:hover,&.is-hover,&:focus,&.is-focus';
active = '&:active,&.is-active';
hover-focus-active = '&:hover,&.is-hover,&:focus,&.is-focus,&:active,&.is-active';

$mobile = 'screen and (max-width: 989px)';
$desktop = 'screen and (min-width: 990px)';

$xsHeight = 'screen and (max-height: 450px)';
$xsWidth = 'screen and (max-width: 450px)';
$msWidth = 'screen and (max-width: 767px)';
$smWidth = 'screen and (max-width: 1023px)';
$smWidthLand = 'screen and (max-width: 1023px) and (orientation: landscape)';
$smWidthPort = 'screen and (max-width: 1023px) and (orientation: portrait)';
$mdHeight = 'screen and (max-height: 799px)';
$mdWidth = 'screen and (max-width: 1309px)';
$lgHeight = 'screen and (min-height: 800px)';
$lgWidth = 'screen and (min-width: 1310px)';